diff --git a/node_modules/@orlov_vo/prettier-plugin-svelte/plugin.js b/node_modules/@orlov_vo/prettier-plugin-svelte/plugin.js
index aee7d7d..f3e6260 100644
--- a/node_modules/@orlov_vo/prettier-plugin-svelte/plugin.js
+++ b/node_modules/@orlov_vo/prettier-plugin-svelte/plugin.js
@@ -89,35 +89,24 @@ function print(path, options, print) {
             n.instance.attributes = extractAttributes(getText(n.instance, options));
             parts.push(path.call(print, 'instance'));
         }
-        parts.push(path.call(print, 'html'));
         if (n.css) {
             n.css.type = 'Style';
             n.css.content.type = 'StyleProgram';
             parts.push(path.call(print, 'css'));
         }
+        parts.push(path.call(print, 'html'));
         return group(join(hardline, parts));
     }
     const [open, close] = ['{', '}'];
     const node = n;
     switch (node.type) {
         case 'Fragment':
-            const children = node.children;
+            const actualFirstIndex = node.children.findIndex(node => !(node.type === 'Text' && node.data.trim() === ''));
             return concat([
                 printChildren(path, print, {
                     skipFirst: true,
-                    filter: (node, i) => {
-                        if (i === 0 && node.type === 'Text' && node.data.trim() === '') {
-                            return false;
-                        }
-                        let include = false;
-                        for (let j = i; j < children.length; j++) {
-                            const child = children[j];
-                            if (!(child.type === 'Text' && child.data.trim() === '')) {
-                                include = true;
-                                break;
-                            }
-                        }
-                        return include;
+                    filter: (_, i) => {
+                        return i >= actualFirstIndex;
                     },
                 }),
                 hardline,
@@ -182,6 +171,7 @@ function print(path, options, print) {
             return concat(def);
         }
         case 'Class':
+        {
             const def = [line, 'class:', node.name];
             const isAttributeShorthand = node.expression &&
                 node.expression.type === 'Identifier' &&
@@ -192,6 +182,20 @@ function print(path, options, print) {
                 def.push('}"');
             }
             return concat(def);
+        }
+        case 'Let':
+        {
+            const def = [line, 'let:', node.name];
+            const isAttributeShorthand = node.expression &&
+                node.expression.type === 'Identifier' &&
+                node.expression.name === node.name;
+            if (!isAttributeShorthand && node.expression) {
+                def.push('="{');
+                def.push(printJS(path, print, 'expression'));
+                def.push('}"');
+            }
+            return concat(def);
+        }
         case 'MustacheTag':
             return concat(['{', printJS(path, print, 'expression'), '}']);
         case 'IfBlock': {
@@ -511,7 +515,7 @@ const languages = [
         name: 'svelte',
         parsers: ['svelte'],
         extensions: ['.svelte', '.html'],
-        vscodeLanguageIds: ['html'],
+        vscodeLanguageIds: ['html', 'svelte'],
     },
 ];
 const parsers = {
