diff --git a/node_modules/prettier-plugin-svelte/plugin.js b/node_modules/prettier-plugin-svelte/plugin.js
index 703bc71..d886a7b 100644
--- a/node_modules/prettier-plugin-svelte/plugin.js
+++ b/node_modules/prettier-plugin-svelte/plugin.js
@@ -73,7 +73,10 @@ function print(path, options, print) {
             n.css.content.type = 'StyleProgram';
             parts.push(path.call(print, 'css'));
         }
-        parts.push(path.call(print, 'html'));
+        const htmlDoc = path.call(print, 'html');
+        if (htmlDoc) {
+            parts.push(htmlDoc);
+        }
         return group(join(hardline, parts));
     }
     const [open, close] = ['{', '}'];
@@ -81,6 +84,9 @@ function print(path, options, print) {
     switch (node.type) {
         case 'Fragment':
             const children = node.children;
+            if (children.length === 0 || children.every(isEmptyNode)) {
+                return '';
+            }
             return concat([
                 printChildren(path, print, {
                     skipFirst: true,
@@ -112,6 +118,7 @@ function print(path, options, print) {
         case 'Window':
         case 'Head':
         case 'Title':
+            const notEmpty = node.children.some(child => !isEmptyNode(child));
             return group(concat([
                 '<',
                 node.name,
@@ -126,9 +133,9 @@ function print(path, options, print) {
                         : '',
                     ...path.map(childPath => childPath.call(print), 'attributes'),
                 ]))),
-                node.children.length ? '>' : ' />',
+                notEmpty ? '>' : ' />',
                 indent(printChildren(path, print)),
-                node.children.length ? concat([softline, '</', node.name, '>']) : '',
+                notEmpty ? concat([softline, '</', node.name, '>']) : '',
             ]));
         case 'Identifier':
             return node.name;
@@ -248,6 +255,25 @@ function print(path, options, print) {
                     ? ''
                     : concat(['=', '{', printJS(path, print, 'expression'), '}']),
             ]);
+        case 'Class':
+            return concat([
+                line,
+                'class:',
+                node.name,
+                node.expression.type === 'Identifier' && node.expression.name === node.name
+                    ? ''
+                    : concat(['=', '{', printJS(path, print, 'expression'), '}']),
+            ]);
+        case 'Let':
+            return concat([
+                line,
+                'let:',
+                node.name,
+                // shorthand let directives have `null` expressions
+                !node.expression || (node.expression.type === 'Identifier' && node.expression.name === node.name)
+                    ? ''
+                    : concat(['=', '{', printJS(path, print, 'expression'), '}']),
+            ]);
         case 'DebugTag':
             return concat([
                 '{@debug',
